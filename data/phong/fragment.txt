#version 430

uniform vec4 ka;
uniform vec4 kd;
uniform vec3 camPos;
uniform float ks;
uniform vec4 lc;
uniform vec3 lightPos;

in vec3 fnorm;
in vec3 fuvs;
in vec3 fpos;

vec4 computePhong(  vec3 lightpos, vec4 LC, vec3 pos, vec3 N, vec3 camPos, float KS, vec4 KA, vec4 KD )
{
    vec3 L = normalize(lightpos - fpos);
    vec3 R = normalize(reflect(L, N));
    vec3 V = normalize(camPos-fpos);
    vec4 ambiant = KA*LC;
    vec4 diffuse = max(dot(L,N), 0.0)*KD*LC;
    vec4 specular = pow(max(dot(R, V), 0.0), KS)*LC;
    return ambiant+diffuse+specular;
 }

void main()
{
    gl_FragColor = computePhong(lightPos, lc, fpos, normalize(fnorm),camPos, ks, ka, kd );
}
